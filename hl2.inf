
Constant Story "Half Life 2: Interactive Fiction Edition";

Constant Headline
	"^A reimagining of Half Life 2 as an Infocom-style text adventure game^
	By Eggbertx (2025)^";

Constant MAX_SCORE 100;
Release 1;

Include "./abbreviations";
Include "./hl2util";

[ Initialise;
	#ifdef STARTLOC;
		switch (STARTLOC) {
			1: GManCustscene();
			2: location = PointInsertionTrainCar;
			3: location = City17TrainStation;
			4: location = City17TrainStationWaitingRoom;
			5: location = NovaProspektLine;
			6: location = InterrogationHallway;
			7: location = InterrogationRoom2;
			8: location = StorageRoomFloor;
			9: location = StorageRoomPlatform;
			10: location = SmallCourtyardOutsideStorageRoom;
			11: location = MainHallAnteroom;
			12: location = TrainStationMainHall;
			default:
				print "Invalid STARTLOC value ", STARTLOC, "^";
				quit;
		}
		#iftrue STARTLOC > 2;
			talks = 2;
			score++;
		#endif;
		#iftrue STARTLOC > 7;
			score++;
			InterrogationRoom2.danger_turn = turns + 4;
		#endif;
	#ifnot;
		GManCustscene();
	#endif;
	return 2;
];

[ GManCustscene;
	Banner();
	print "^^You don't know where you are, or what you were doing. You are aware that
		you are in a black void, but you can't remember how you got here.^^
		You start to realize that you are in the presence of someone you have worked with
		(or rather, for), known as the ~G-Man~.^^";
	Pause();
	print "He speaks to you with an odd cadence, ~Rise and shine, Mr Freeman, rise
		and...shine. Not that I wish to imply you have been sleeping on...the job...
		No one is more deserving of a rest. And all the effort in the world would have gone
		to waste, until...well, let's just say your hour has...come again~. He pauses for
		a moment.^^";
	Pause();
	print "~The right man in the wrong place can make all the difference in the world...
		So wake up Mr. Freeman... Wake up and smell the ashes.~^^
		He disappears, or rather, you reappear.^^";
	Pause();
	! PlayerTo(PointInsertionTrainCar);
	location = PointInsertionTrainCar;
];


! ----------------------------------------------------------------------------
! Point Insertion Train Car and children
! ----------------------------------------------------------------------------

GameLocation PointInsertionTrainCar "Point Insertion",
	with name "train" "car",
	description [;
		if(self hasnt enclosed)
			"You are standing in an empty train car that has just stopped at an unknown
			location. The doors are open.";
		"You are standing in a train car. The interior is dimly lit by flickering
		fluorescent lights. There are a few melancholic looking citizens in denim coveralls
		seated or standing about.";
	],
	out_to [;
		if (self hasnt enclosed) {
			score++;
			return City17TrainStation;
		}
		"You can't leave yet, the doors are closed and the train is still moving. You can talk to the
			other passengers to pass time as you wait, though.";
	],
	has light enclosed container;

Nearby DidntSeeYouGetOnCitizen "man standing by the doors",
	class LimitedTalker,
	with name "man" "standing" "up" "near" "by" "the" "door" "doors",
	description "a man wearing denim coveralls and carrying a suitcase, standing by the train car doors",
	talk_speech "He looks at you and says, ~I didn't see you get on.~",
	talk2_speech "He says, ~This is my third transfer this year.~",
	has male;

Nearby RelocatedCitizen "man sitting on the seat",
	class LimitedTalker,
	with name "man" "sitting" "down" "on" "the" "seat",
	description "a man wearing denim coveralls, sitting on the seat holding a suitcase",
	talk_speech "He says, ~No matter how many times I get relocated, I never get used to it.~",
	has male;


! ----------------------------------------------------------------------------
! City 17 Train Station and children
! ----------------------------------------------------------------------------

Object City17TrainStation "City 17 Train Station",
	with description "You are at a run-down train station, with melancholic looking citizens in denim coveralls passing through.",
	w_to TurnstileToWaitingRoom,
	has light;

Object -> TurnstileToWaitingRoom "turnstile to the waiting room",
	class LocationDoor,
	with name "turnstile" "to" "waiting" "room",
	description "This is a turnstile with a sign that says ~Citizen Processing Waiting Room~",
	door_to [;
		print "(going through the turnstile)^";
		return City17TrainStationWaitingRoom;
	],
	door_dir City17TrainStationWaitingRoom,
	before [;
		Open,Enter:
			if (location == City17TrainStation)
				<<Go w_obj>>;
			"This is a one-way turnstile.";
		Close:
			print_ret (The)self, " is not something you can close.";
	],
	found_in City17TrainStation City17TrainStationWaitingRoom,
	has open;

Nearby AreYouTheOnlyOnes "woman anxiously standing on the other side of the gate",
	class LimitedTalker,
	with name "woman" "standing" "by" "the" "gate",
	description "a woman in coveralls standing by the train station gate",
	talk_speech "She asks you, ~Are you the only ones on that train?~",
	talk2_speech "She says, ~Overwatch stopped our train in the woods and took my husband for questioning.
		They said he'd be on the next train. I'm not sure when that was...They're being nice, though, letting me wait for him.~",
	has female;

Nearby MoveAway "civil protection officer",
	class CivilProtectionUnit,
	with description [;
		if (self has targeting_player) {
			"The civil protection officer looks at you and brandishes his stun baton.";
		} else {
			print "You see a civil protection officer holding a stun baton, harassing a citizen about his luggage.^";
			style bold;
			print "~First warning, move away.~^";
			style roman;
			print "~But this stuff, it's all I have left...~ The civil protection officer strikes him with his baton.^";
			style bold;
			print "~Final warning, move it!~^";
			style roman;
			print "~Alright, I'm moving, jeez...~^The citizen steps away from the luggage and passes through the turnstile.";
			give self targeting_player;
		}
	],
	before [;
		Watch,Listen:
			if(self hasnt targeting_player) {
				<<Examine self>>;
			}
		Talk:
			<<Examine self>>;
	],
	life [;
		Attack: "With what, your bare hands?";
	];

Nearby VortigauntSweeping "Vortigaunt sweeping the floor",
	with name "vortigaunt" "sweeping" "the" "floor",
	description "The Vortigaunt is sweeping the floor with a broom.",
	has male animate;

! ----------------------------------------------------------------------------
! Waiting Room
! ----------------------------------------------------------------------------

Object City17TrainStationWaitingRoom "City 17 Citizen Processing Waiting Room",
	with description "You are in the waiting room of the train station.",
	initial [;
		give TurnstileToWaitingRoom ~open;
		give TurnstileToWaitingRoom locked;
	],
	n_to NovaProspektLine,
	e_to TurnstileToWaitingRoom,
	has light;

Nearby DepartureArrivalBoard "departure and arrival boards",
	with name "departure" "and" "arrival" "board" "boards",
	description "Boards showing departures and arrival times for trains to and from various locations.
	It looks kind of faded, like everything else around here.",
	has static pluralname;

Nearby PacingCitizen "man pacing back and forth, talking to himself",
	class LimitedTalker,
	with name "pacing" "man" "pacer",
	description "a man in coveralls, pacing back and forth and muttering to himself",
	default_response "~...they're always departing but they never arrive... and the ones that do arrive... they never leave...
	you never see them go they're always full... no one ever gets on but they're always... they're always departing but they never arrive...~";

Nearby DontDrinkTheWaterCitizen "man sitting on a bench, looking confused",
	class LimitedTalker,
	with name "confused" "man" "sitting" "on" "bench",
	description [;
		print "a dazed looking man sitting on a bench";
		if (self.talk_speech ~= 0)
			print ". He gestures at you.";
	],
	talk_speech "He whispers, ~Don't drink the water. They put something in it to make you forget. I don't even remember how I got here.~";

Nearby VendingMachine "vending machine",
	with name "vending" "machine" "Dr" "Breens" "Private" "Reserve",
	with description "a vending machine labelled ~Dr>Breens Private Reserve~.",
	has static;

Nearby AnnoyedCitizen "annoyed looking man sitting on a bench",
	class LimitedTalker,
	with name "annoyed" "man" "citizen" "sitting" "on" "bench",
	description "an annoyed looking man sitting on a bench, tapping his foot impatiently",
	talk_speech "He says, ~I see they took your suitcase too! They can't get away with this much longer.~",
	has male;

Nearby TwoCitizensBreenAgain "two citizens watching the breencast",
	class LimitedTalker,
	with name "two" "citizens",
	description "two citizens in coveralls, watching the breencast on a large display",
	talk_speech "One of them says, ~Dr. Breen again? I was hoping I'd seen the last of him in City 14.~^
		The other replies, ~I wouldn't say that too loud. This is his base of operations.~",
	before [;
		Watch,Listen:
			<<Talk self>>;
	],
	has proper pluralname;

! ----------------------------------------------------------------------------
! Nova Prospekt Line and gate
! ----------------------------------------------------------------------------

Object NovaProspektLine "Line to Nova Prospekt Platform",
	with name "line" "entry" "to" "Nova" "Prospekt",
	description "a processing line leading to the Nova Prospekt train platform",
	initial [;
		print "(getting in line for Nova Prospekt stop)^";
		if (self hasnt visited) {
			print "You hear civil protection units giving commands to citizens.^";
			style bold;
			print "~You, citizen! Come with me! Move it!~^";
			style roman;
			print "~Wait a minute...~^";
			style bold;
			print "~Get in here.~^";
			style roman;
			print "~Where are you taking me?~^";
			style bold;
			print "~Go on!~^";
			style roman;
			print "~Me?!~^";
			style bold;
			print "~I said move!~^";
			style roman;
			"The civil protection officer opens the door and forces the citizen inside.^";
		}
	],
	n_to NovaProspektGate,
	e_to InterrogationHallwayDoor,
	has light;

Nearby NovaProspektGate "gate to Nova Prospekt platform",
	class LocationDoor
	with name "gate" "to" "Nova" "Prospekt" "platform",
	description [;
		print "This gate has a sign labelled ~Nova Prospekt~ by it. ";
		if (self has locked) {
			"The gate is locked.";
		}
		"The gate is open.";
	],
	before [;
		Enter:
			return self.door_to();
		Open:
			if (self has open) {
				"The gate is already open.";
			}
			"The gate is locked.";
	],
	door_to [;
		if (self hasnt locked) {
			give NovaProspektGate locked;
			print "The gate shuts and locks itself before you can enter. ";
			if (Camera hasnt targeting_player) {
				give Camera targeting_player;
				print "The security camera swivels to look at you and takes your picture.^";
			} else {
				print "The security camera takes your picture.^";
			}
			print "The civil protection officer states, ";
			style bold;
			print "~Don't move.~^";
			style roman;
			give InterrogationHallwayDoor ~locked;
			give InterrogationHallwayDoor open;
			"The security hallway door opens and an officer inside the hallway points at you and says ~You, citizen! Come with me.~^";
		}
		"You cannot pass through the gate, it is closed and locked.";
	],
	has open;

Object InterrogationHallwayDoor "door"
	class LocationDoor,
	with name "door" "to" "interrogation" "hallway",
	description "This door with a sign labelled ~Security~. You get the feeling that people who go through it don't usually come back.",
	door_to [;
		if (location == InterrogationHallway)
			return NovaProspektLine;
		return InterrogationHallway;
	],
	door_dir [;
		if (location == InterrogationHallway)
			return w_to;
		return e_to;
	],
	found_in InterrogationHallway NovaProspektLine,
	has locked;

! ----------------------------------------------------------------------------
! Interrogation Hallway and Barnie/Dr. Kleiner conversation
! ----------------------------------------------------------------------------

Object InterrogationHallway "Hallway to interrogation rooms",
	with name "hallway" "to" "interrogation" "rooms",
	description "a dimly lit hallway with two interrogation room doors",
	initial [;
		give InterrogationHallwayDoor ~open;
		give InterrogationHallwayDoor locked;
		"After you enter and close the door behind you, you hear the door click as someone locks it.
		The civil protection officer enters the door to the east and beckons you to follow him.^";
	],
	w_to InterrogationHallwayDoor,
	n_to InterrogationDoorN,
	e_to InterrogationDoorE,
	has light;

Nearby InterrogationDoorN "door to interrogation room 1",
	with name "door" "to" "interrogation" "room" "1" "north",
	description [;
		print "This door has a small viewing window and a sign labelled ~Interrogation Room 1~.";
		if (self.viewing_window ~= 0) {
			print "^";
			<<Open self>>;
		}
	],
	before [;
		Open,Enter:
			if(self.viewing_window ~= 0) {
				print (string)self.viewing_window;
				self.viewing_window = 0;
				rtrue;
			}
	],
	door_dir [;
		return n_to;
	],
	viewing_window "Through the viewing window of the door, you see a man sitting in an interrogation chair and a civil protection
		officer through the window of the door.^^
		The citizen indignantly says, ~This must be a mistake. I got a standard relocation coupon, just like everybody else.~^^
		The officer notices you looking in, and shuts the viewing window.",
	has static door openable locked;

Nearby InterrogationDoorE "door to interrogation room 2",
	class LocationDoor,
	with name "door" "to" "interrogation" "room" "2" "east",
	description "This door has a small viewing window and a sign labelled ~Interrogation Room 2~",
	door_to [;
		if(location == InterrogationHallway) return InterrogationRoom2;
		return InterrogationHallway;
	],
	door_dir [;
		if (location == InterrogationRoom2) return w_to;
		return e_to;
	],
	found_in InterrogationHallway InterrogationRoom2,
	has open;

Object InterrogationRoom2 "Interrogation Room 2",
	with name "interrogation" "room" "2" "east",
	description [;
		print "This room is lit by a single overhead lamp. ";
		if (self hasnt enclosed) {
			"Someone is banging on the other side of the door, and Barney is holding it closed. You should probably leave.";
		}
	],
	each_turn [;
		if(self.danger_turn > 0) {
			new_line;
			if (turns + 2 == self.danger_turn) {
				"The banging gets louder.^Barney looks at you and shouts, ~Hurry up, Gordon! Get out of here!~^";
			} else if (turns + 1 == self.danger_turn) {
				"The banging on the door gets even louder.^Barney shouts, ~I can't hold them for much longer!~^";
			} else if (turns >= self.danger_turn) {
				deadflag = -2;
				"The door bursts open, knocking Barney aside.
				A squad of civil protection officers rush in with their guns drawn, and open fire, filling you with bullets.^";
			}
		}
	],
	after [;
		if (self has enclosed) {
			remove BatonCP1;
			print "^As you enter the room, the stationed civil protection officer asks the one you followed, ";
			style bold;
			print "~You want any help with this one?~^";
			style roman;
			print "He replies, ~No, I'm good~, and the first officer leaves the room, closing the door behind him.^";
			print "The officer who brought you in walks to the communications computer and types something in. The two cameras
				in the room deactivate as the officer chuckles to himself and says, ~Yeah, I'm gonna need me some privacy for this.~^^";
				remove TwoSecCams;
				Pause();
			print "He turns to you and says, ~Now...~ and pulls off his helmet. ~About that beer I owed ya. It's me Gordon! Barney, from 
				Black Mesa. Hey, sorry for the scare, I had to put on a show for the cameras.
				I've been working undercover with Civil Protection. I can't take too long, or they'll get suspicious. I'm way behind on my
				beating quota.~^
				A familiar face appears on the computer screen, Dr. Kleiner, one of the scientists from Black Mesa.
				~Yes, Barney, what is it? I'm in the middle of a critical test.~^
				~Sorry Doc, but look who's here.~ He steps aside.^
				~Great Scott! Gordon Freeman! I expected more warning.~^
				~Yeah, you and me both, Doc. He was about to board the express to Nova Prospekt!~^
				~Well, Barney, what do you intend?~^
				~I'm thinking, I'm thinking!~^";
			Pause();
			print "~Alyx is around here...somewhere. She would have a better idea of how to get him here.~^
				~Well, as long as he stays away from checkpoints, we should be okay.
				Listen, I gotta go Doc, we're taking enough chances as it is.~^
				~Very well. And eh, Gordon? Good to see you!~^
				The screen goes blank and Barney turns to you.
				~Okay, Gordon, you're gonna have to make your own way to Dr. Kleiner's Lab.~^^
				You hear someone banging on the entry door from the other side.
				~Man, that's what I was afraid of.~ Barney rushes to the far door and opens it for you.^
				~Get in here, Gordon, before you blow my cover!~^";
			give self ~enclosed;
			give BarneyDoor ~locked;
			give BarneyDoor open;
			give InterrogationDoorE ~open;
			give InterrogationDoorE locked;
			self.danger_turn = turns + 4;
			give self volatile; ! LookRoutine prevents turns from incrementing on look in non-volatile areas
			rtrue;
		}
	],
	n_to BarneyDoor,
	s_to InterrogationDoorE,
	danger_turn 0,
	has light enclosed;

Nearby TwoSecCams "two security cameras",
	with name "two" "security" "cameras" "camera",
	with description "Two security cameras are mounted to the wall, focused on the interrogation chair.",
	has static;

Nearby InterrogationChair "chair bolted to the floor in the center of the room",
	with name "chair" "bolted" "to" "the" "floor",
	with description "This is a chair that is bolted to the floor in the center of the room, with restraints on the armrests.",
	has static;

Nearby BarneyDoor "storage room door",
	with name "storage" "room" "door",
	description "Barney is holding the door open, urging you to enter.",
	door_to [;
		if (location == InterrogationRoom2) {
			return StorageRoomFloor;
		}
		return InterrogationRoom2;
	],
	door_dir [;
		if (location == InterrogationRoom2) {
			return n_to;
		}
		return s_to;
	],
	found_in InterrogationRoom2 StorageRoomFloor,
	has static door openable;


! ----------------------------------------------------------------------------
! Storage room, platform, and small courtyard outside
! ---------------------------------------------------------------------------

Object StorageRoomFloor "Storage Room",
	with name "storage" "room",
	description "a small storage room with a few crates and a ladder leading up to a platform and a window",
	initial [;
		if (self hasnt visited) {
			print "(entering the storage room)^
				Barney says ~Pile up some stuff to get through that window, and keep going until you're in the plaza.
				I'll meet up with you later.~^";
			score++;
			give BarneyDoor ~open;
		}
	],
	s_to BarneyDoor,
	u_to StorageRoomLadder,
	has light;

Nearby StorageRoomLadder "ladder",
	with name "ladder" "to" "the" "platform",
	description "a ladder leading up to a platform with a window",
	door_dir [;
		if (location == StorageRoomFloor) {
			return StorageRoomPlatform;
		}
		return StorageRoomFloor;
	],
	door_to [;
		if (location == StorageRoomFloor) {
			print "(climbing up the ladder)^";
			return StorageRoomPlatform;
		}
		print "(climbing down the ladder)^";
		return StorageRoomFloor;
	],
	found_in StorageRoomFloor StorageRoomPlatform,
	has static door open;

Object StorageRoomPlatform "Storage Room Platform",
	with name "storage" "room" "platform",
	description "You are on a platform with a window. You see a small courtyard outside the window.",
	down_to StorageRoomLadder,
	out_to StorageRoomWindow,
	d_to StorageRoomLadder,
	has light;

Nearby LargeWoodenBox "large wooden crate",
	with name "big" "large" "wooden" "crate",
	with description "a large wooden crate",
	has supporter;

Nearby MediumWoodenBox "wooden box",
	with name "wooden" "box",
	with description "a medium-sized wooden box";

Nearby StorageRoomWindow "window to a small courtyard",
	with name "window",
	short_name [;
		if (location == SmallCourtyardOutsideStorageRoom) {
			print "window to the storage room";
		} else {
			print "window to a small courtyard";
		}
		rtrue;
	],
	description "a window overlooking a small courtyard",
	door_to [;
		! player must have the boxes stacked up to reach the window
		if (location == StorageRoomPlatform && (parent(LargeWoodenBox) == MediumWoodenBox || parent(MediumWoodenBox) == LargeWoodenBox)) {
			print "(climbing out the window)^";
			PlayerTo(SmallCourtyardOutsideStorageRoom);
			rtrue;
		}
		print "You can't reach the window from here.";
		if (location == StorageRoomPlatform)
			" You need to stack some boxes up to reach it.";
		rtrue;
	],
	door_dir [;
		if (location == SmallCourtyardOutsideStorageRoom)
			return w_to;
		return out_to;
	],
	found_in StorageRoomPlatform SmallCourtyardOutsideStorageRoom,
	has static door open;

Object SmallCourtyardOutsideStorageRoom "Small Courtyard",
	with description "You are in a small courtyard.",
	initial [;
		if (self hasnt visited) score++;
	],
	s_to DoorToMainHallAnteroom,
	w_to StorageRoomWindow,
	has light;

Object DoorToMainHallAnteroom "door",
	class LocationDoor,
	with name "ajar" "door",
	door_to [;
		if (location == MainHallAnteroom) {
			return SmallCourtyardOutsideStorageRoom;
		}
		return MainHallAnteroom;
	],
	door_dir [;
		if (location == MainHallAnteroom) {
			return s_to;
		}
		return n_to;
	],
	found_in SmallCourtyardOutsideStorageRoom MainHallAnteroom,
	has ajar;

! ----------------------------------------------------------------------------
! Main hall and anteroom
! ----------------------------------------------------------------------------

Object MainHallAnteroom "Main Hall Anteroom",
	with description [;
		print "You are in a small room to the north of the main hall";
		if (SodaCan notin TrashBin) {
			", with a bored looking civil protection officer standing by a trash bin.";
		}
		".";
	],
	submissive [;
		! put can in bin
		move SodaCan to TrashBin;
		print (The)TrashBinCop, " chuckles and says, ";
		style bold;
		print "~Alright, you can go.~^";
		style roman;
		print "He turns and walks away.";
		score = score + 2;
		move TrashBinCop to TrainStationMainHall;
	],
	defiant [;
		! throw can at something other than the bin
		move SodaCan to location;
		style bold;
		print "~Suspect, prepare to receive civil judgement.~^^";
		style roman;
		TrashBinCop.attack(1);
		print " and walks away.^";
		move TrashBinCop to TrainStationMainHall;
	],
	initial [;
		if (self hasnt visited) {
			give TrashBin ~container;
			give TrashBin supporter;
			move SodaCan to TrashBin;
		}
	],
	before [;
		ThrowAt:
			print "You throw ", (the)noun, " at ", (the)second, ".^";
			if (noun == SodaCan) {
				if (second == TrashBinCop) {
					print "It bounces off his head. The officer activates his stun baton and says, ";
					self.defiant();
					score = score + 4;
				} else if(second == TrashBin) {
					print "It lands in the trash bin. ";
					self.submissive();
				} else {
					self.defiant();
				}
				self.potc_turn = -2;
				rtrue;
			}
	],
	after [;
		Insert:
			self.submissive();
			rtrue;
		Take:
			if (noun == SodaCan && TrashBinCop in location) {
				self.potc_turn = 3;
				move SodaCan to player;
				print (The)TrashBinCop, " says, ";
				style bold;
				print "~Now, put it in the trash can.~^";
				style roman;
				if (not_holding) {
					rfalse;
				}
				rtrue;
			}
		Drop:
			if (noun == SodaCan && TrashBinCop in location) {
				self.potc_turn = 3;
				print "The officer says, ";
				style bold;
				print "~I said put it in the trash can.~^";
				style roman;
				rtrue;
			}
		default:
			if (TrashBinCop notin location || action == ##Help || self.potc_turn < 0) {
				rfalse;
			}
			switch (self.potc_turn) {
				3:
					print "The officer says, ";
					style bold;
					print "~";
					if (SodaCan in player) {
						print "Put it in the trash can.";
					} else {
						print "I said pick up the can.";
					}
					print "~^";
					style roman;
					break;
				2:
					print "The officer says, ";
					style bold;
					print "~";
					if (SodaCan in player) {
						print "I said, put it in the trash can.";
					} else {
						print "You knocked it over, pick it up.";
					}
					print "~^";
					style roman;
					break;
				1:
					print "The officer gets more annoyed and says, ";
					style bold;
					print "~";
					if (SodaCan in player) {
						print "Put it in the bin. Now.";
					} else {
						print "Pick. Up. The can.";
					}
					print "~^";
					style roman;
					break;
				0:
					print "The officer chuckles and says, ";
					style bold;
					print "~Whatever. Now get out of here.~^";
					style roman;
					print "He turns and walks away.";
					move TrashBinCop to TrainStationMainHall;
					break;
			}
			self.potc_turn--;
		! rtrue;
	],
	s_to [;
		if (SodaCan in TrashBin && TrashBin has container) {
			return TrainStationMainHall;
		}
		return TrashBinCop.potc();
	],
	n_to DoorToMainHallAnteroom,
	potc_turn -1,
	has light;

Nearby SodaCan "soda can",
	with name "soda" "can",
	with description "This is a can of Dr. Breen's Private Reserve.";

Nearby TrashBinCop "civil protection officer",
	class CivilProtectionUnit,
	with description [;
		print "This is a civil protection officer with a stun baton. He looks bored. ";
		if (location == MainHallAnteroom && MainHallAnteroom.potc_turn > -2) {
			self.potc();
		}
	],
	potc [;
		if (TrashBin hasnt supporter) {
			rfalse;
		}
		MainHallAnteroom.potc_turn = 4;
		if (action == ##Examine) {
			print " He";
		} else
			print (The)self, " is in the way. He ";
		print " knocks a soda can off the trash bin with his stun baton, then looks at you and says, ";
		style bold;
		print "~Pick up that can.~";
		style roman;
		move SodaCan to location;
		give TrashBin container;
		give TrashBin ~supporter;
		rtrue;
	];

Object TrainStationMainHall "Main Hall",
	with name "main" "hall" "of" "the" "train" "station",
	description "You are in the main hall of the train station. Several citizens are lined up here for food rations.",
	n_to MainHallAnteroom
	has light;

! ----------------------------------------------------------------------------
! Reusable objects
! ----------------------------------------------------------------------------

Object BreencastWelcome "Breencast",
	class Breencast,
	with name "large" "display" "showing" "Dr" "Breen" "breencast",
	watch_text "The televised Dr Breen says, ~Welcome. Welcome to City 17.^
		You have chosen, or been chosen, to relocate to one of our finest remaining urban centers.
		I thought so much of City 17 that I elected to establish my administration here, in the citadel so thoughtfully
		provided by Our Benefactors. I have been proud to call City 17 my home. And so, whether you are here to stay,
		or passing through on your way to parts unknown, welcome to City 17.^
		It's safer here.~",
	found_in City17TrainStation City17TrainStationWaitingRoom NovaProspektLine;

Object BreencastPlaza "Breencast",
	class Breencast,
	with name "large" "display" "showing" "Dr" "Breen" "breencast",
	watch_text "The televised Dr Breen says, ~Let me read a letter I recently received.
		'Dear Dr. Breen. Why has the Combine seen fit to suppress our reproductive cycle? Sincerely, A Concerned Citizen.'^
		Thank you for writing, Concerned. Of course your question touches on one of the basic biological impulses, with all
		its associated hopes and fears for the future of the species. I also detect some unspoken questions:
		'Do Our Benefactors really know what's best for us?',
		'What gives them the right to make this kind of decision for mankind?',
		'Will they ever deactivate the suppression field and let us breed again?'
		Allow me to address the anxieties underlying your concerns, rather than try to answer every possible question you might have left unvoiced.^^
		First, let us consider the fact that for the first time ever, as a species, immortality is in our reach.
		This simple fact has far-reaching implications. It requires radical rethinking and revision of our genetic imperatives.
		It also requires planning and forethought that run in direct opposition to our neural pre-sets.
		I find it helpful at times like these to remind myself that our true enemy is Instinct.
		Instinct was our mother when we were an infant species.
		Instinct coddled us and kept us safe in those hardscrabble years when we hardened our sticks and cooked our first meals above a meager
			fire and started at the shadows that leapt upon the cavern's walls.
		But inseparable from Instinct is its dark twin, Superstition.
		Instinct is inextricably bound to unreasoning impulses, and today we clearly see its true nature. Instinct has just become aware of its irrelevance,
			and like a cornered beast, it will not go down without a bloody fight.
		Instinct would inflict a fatal injury on our species. Instinct creates its own oppressors, and bids us rise up against them.
		Instinct tells us that the unknown is a threat, rather than an opportunity. Instinct slyly and covertly compels us away from change and progress.
		Instinct, therefore, must be expunged. It must be fought tooth and nail, beginning with the basest of human urges: the urge to reproduce.
		We should thank Our Benefactors for giving us respite from this overpowering force. They have thrown a switch and exorcised our demons in a single stroke.
		They have given us the strength we never could have summoned to overcome this compulsion. They have given us purpose. They have turned our eyes toward the stars.
		Let me assure you that the Suppressing Field will be shut off on the day that we have mastered ourselves, the day we can prove we no longer need it.
		And that day of transformation, I have it on good authority, is close at hand.~",
	found_in TrainStationMainHall;

Object Camera "security camera",
	with name "security" "camera",
	with description [;
		print "A security camera with a ";
		if (self has targeting_player)
			print "red";
		else
			print "green";
		print " indicator light, mounted to the wall, ";
		if (self has targeting_player)
			"focused on you.";
		"beeping every few seconds and swivelling from side to side.";
	],
	after [;
		Examine:
			if (self hasnt targeting_player) {
				give self targeting_player;
				"The camera swivels to look at you, and its light turns red.";
			}
	],
	found_in NovaProspektLine,
	has static;

Object BatonCP1 "civil protection unit",
	class CivilProtectionUnit,
	with name "civil" "protection" "unit" "cp" "cop",
	description "This is a member of Civil Protection. He is holding a stun baton. You probably shouldn't piss him off.",
	life [;
		Attack: "With what, your bare hands?";
	],
	found_in NovaProspektLine,
	has animate;

Object CombineCommsComputer "Combine communications computer",
	with name "combine" "communications" "computer" "computer",
	description "an advanced looking computer with a large display mounted to the wall",
	found_in InterrogationRoom2,
	has static;


Object TrashBin "trash bin",
	with name "trash" "bin",
	description "a trash bin",
	after [;
		LetGo,Receive:
			if (location == MainHallAnteroom && noun == SodaCan) {
				! weird stuff happens if the can is dropped in the bin when the bin has both container and supporter
				give self container;
				give self ~supporter;
			}
	],
	found_in MainHallAnteroom,
	has static container open;

! Object City17TrainStationVolatileTest "Danger zone test",
! 	with description "testing agitated CPs",
! 	s_to City17TrainStation,
! 	danger_turn -1,
! 	initial [;
! 		self.danger_turn = turns + 3;
! 	],
! 	after [;
! 		Look,Jump,Talk:
! 			DangerTestHandler(self);
! 	],
! 	has light volatile;

! LimitedTalker -> CP1 "angry looking civil protection unit",
! 	with name "agitated" "civil" "protection" "unit" "cp" "cop",
! 	description "a civil protection unit holding a stun baton, looking agitated",
! 	! talk_speech "You, come here!",
! 	before [;
! 		Attack:
! 			print "You can't fight him off with your bare hands!^";
! 			location.danger_turn = turns;
! 			DangerTestHandler(location);
! 			rtrue;
! 	],
! 	has animate;

! [ DangerTestHandler loc attacking;
! 	if (action == ##Help) {
! 		rfalse;
! 	}
! 	if (loc has volatile && loc.danger_turn < 0) {
! 		loc.danger_turn = turns + 3;
! 		print "setting danger turn to ", loc.danger_turn, "^";
! 	}

! 	if (turns >= loc.danger_turn) {
! 		TakeDamage(2, 1);
! 		print "The civil protection unit shouts ~Stop!~ and attacks you with his stun baton!^";
! 		print "Your health is now ", health, ".^";
! 	} else {
! 		print "The civil protection unit looks agitated. You should probably leave soon.^";
! 		print "(", (loc.danger_turn - turns), " turns until he attacks you)^";
! 	}
! 	if (health <= 0) {
! 		deadflag = 1;
! 		rtrue;
! 	}
! ];
